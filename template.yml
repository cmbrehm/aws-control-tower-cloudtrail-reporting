AWSTemplateFormatVersion: "2010-09-09"
Description: Creates Glue stuff to process CloudTrail logs consolidated by AWS Control Tower into a queryable table
Transform: AWS::Serverless-2016-10-31
Resources:
  ParquetS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ct-parquet-${AWS::AccountId}-${AWS::Region}
#      BucketEncryption:
#        ServerSideEncryptionConfiguration:
#          - ServerSideEncryptionByDefault:
#              SSEAlgorithm: aws:kms
#              KMSMasterKeyID: KMS-KEY-ARN
# doesn't work cause guardrails :(
  AthenaResultsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub athena-query-results-${AWS::StackName}-${AWS::AccountId}-${AWS::Region}
  GlueTempBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub glue-temp-${AWS::StackName}-${AWS::AccountId}-${AWS::Region}
  AthenaWorkgroup:
    Type: AWS::Athena::WorkGroup
    Properties:
      Name: cloudtrail-workgroup
      Description: for CloudTrail Reporting
      State: ENABLED
      WorkGroupConfiguration:
        ResultConfiguration:
          OutputLocation: !Sub s3://${AthenaResultsBucket}/
  CloudTrailDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Description: tables for auditing against consolidated CloudTrail
        Name: cloudtrail-db
  GlueCrawlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: glue.amazonaws.com
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Policies:
        - PolicyName: ReadS3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::aws-controltower-logs-${AWS::AccountId}-${AWS::Region}/*"
                  - !Sub "arn:aws:s3:::sam-cli-bucket-${AWS::AccountId}-${AWS::Region}/*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub "${ParquetS3Bucket.Arn}/*"
                  - !Sub "${GlueTempBucket.Arn}/*"
  GlueJsonToParquetJob:
    Type: AWS::Glue::Job
    Properties:
        Command:
          Name: glueetl
          PythonVersion: '3'
          ScriptLocation: ./gluescript.py
        DefaultArguments:
          "--source_bucket": !Sub "aws-controltower-logs-${AWS::AccountId}-${AWS::Region}"
          "--dest_bucket": !Ref ParquetS3Bucket
          "--TempDir": !Sub "s3://${GlueTempBucket.DomainName}/temp/"
        ExecutionProperty:
          MaxConcurrentRuns: 1
        GlueVersion: '2.0'
        MaxRetries: 0
        Name: cloudtrail-to-parquet
        NumberOfWorkers: 10
        Role: !Ref GlueCrawlerRole
        Timeout: 2880
        WorkerType: G.1X
  ParquetCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Configuration: '{"Version":1.0,"CrawlerOutput":{"Partitions":{"AddOrUpdateBehavior":"InheritFromTable"}}}'
      Description: discovers partitions in cloudtrail raw data
      Role: !GetAtt GlueCrawlerRole.Arn
      DatabaseName: !Ref CloudTrailDatabase
      Targets:
        S3Targets:
          - Path: !Sub "s3://${ParquetS3Bucket}/cloudtrail/"
      TablePrefix: pqt
      SchemaChangePolicy:
        DeleteBehavior: DEPRECATE_IN_DATABASE
        UpdateBehavior: LOG
  Workflow:
    Type: AWS::Glue::Workflow
    Properties:
      Description: Nightly run
      Name: nightly-workflow
  StartTrigger:
    Type: AWS::Glue::Trigger
    Properties:
      Actions:
      - JobName: !Ref GlueJsonToParquetJob
      Description: Early Morning
      Name: nightly-run-new
      Schedule: cron(33 7 * * ? *)
      StartOnCreation: true
      Type: SCHEDULED
      WorkflowName: !Ref Workflow
  AfterCrawlTrigger2:
    Type: AWS::Glue::Trigger
    Properties:
      StartOnCreation: true
      Actions:
      - CrawlerName: !Ref ParquetCrawler
      Name: after-pq-convert
      Predicate:
        Conditions:
        - JobName: !Ref GlueJsonToParquetJob
          LogicalOperator: EQUALS
          State: SUCCEEDED
        Logical: ANY
      Type: CONDITIONAL
      WorkflowName:  !Ref Workflow
  SNSReportDistributionTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: CloudTrailReportDistribution
  LambdaReporterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonAthenaFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ReadParquet
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub "${ParquetS3Bucket.Arn}/*"
                  - !Sub "arn:aws:s3:::athena-query-results-${AWS::StackName}-${AWS::AccountId}-${AWS::Region}/*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetBucketLocation
                Resource:
                  - !Sub "arn:aws:s3:::athena-query-results-${AWS::StackName}-${AWS::AccountId}-${AWS::Region}"
                  - !GetAtt ParquetS3Bucket.Arn
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Ref SNSReportDistributionTopic
  LambdaReporter:
    Type: AWS::Serverless::Function
    Properties:
      Handler: query.lambda_handler
      Description: runs reports
      Runtime: python3.8
      Environment:
        Variables:
          TABLE_NAME: "pqtcloudtrail"
          WORKGROUP: !Ref AthenaWorkgroup
          OUTPUT_BUCKET: !Ref AthenaResultsBucket
          DATABASE: !Ref CloudTrailDatabase
      Role: !GetAtt LambdaReporterRole.Arn
      Timeout: 600
      Events:
        CloudWatchEvent:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - "aws.glue"
              detail-type:
                - "Glue Crawler State Change"
              detail:
                crawlerName:
                  - !Ref ParquetCrawler
                state:
                  - Succeeded
  LambdaSender:
    Type: AWS::Serverless::Function
    Properties:
      Handler: send.lambda_handler
      Description: sends reports via SNS
      Runtime: python3.8
      Environment:
        Variables:
          SNS_TOPIC: !Ref SNSReportDistributionTopic
      Role: !GetAtt LambdaReporterRole.Arn
      Timeout: 600
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref AthenaResultsBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                - Name: suffix
                  Value: ".csv"
